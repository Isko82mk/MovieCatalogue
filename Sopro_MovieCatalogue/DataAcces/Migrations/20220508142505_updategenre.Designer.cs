// <auto-generated />
using DataAcces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAcces.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220508142505_updategenre")]
    partial class updategenre
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GenreMovie");

                    b.Property<int>("MovieId");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Genres");

                    b.HasData(
                        new { Id = 1, GenreMovie = 0, MovieId = 1 },
                        new { Id = 2, GenreMovie = 0, MovieId = 1 },
                        new { Id = 3, GenreMovie = 0, MovieId = 1 }
                    );
                });

            modelBuilder.Entity("Model.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("MovieTitle");

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new { Id = 1, Description = "Some Rambo Movie Description", MovieTitle = "Rambo", Year = "1982" },
                        new { Id = 2, Description = "Some Terminator Movie Description", MovieTitle = "Terminator", Year = "1986" },
                        new { Id = 3, Description = "Some  Batman Movie Description", MovieTitle = "Batman", Year = "1986" }
                    );
                });

            modelBuilder.Entity("Model.MoviePerson", b =>
                {
                    b.Property<int>("MovieId");

                    b.Property<int>("PersonId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("MovieId", "PersonId");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("MoviePersons");
                });

            modelBuilder.Entity("Model.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<int>("Role");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new { Id = 1, FirstName = "Silvester", LastName = "Stalone", Role = 0 },
                        new { Id = 2, FirstName = "Ted", LastName = " Kotcheff", Role = 1 },
                        new { Id = 3, FirstName = "Buzz ", LastName = "Feitshans", Role = 2 }
                    );
                });

            modelBuilder.Entity("Model.Genre", b =>
                {
                    b.HasOne("Model.Movie", "Movie")
                        .WithMany("Genres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.MoviePerson", b =>
                {
                    b.HasOne("Model.Movie", "Movie")
                        .WithMany("MoviePerson")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Person", "Person")
                        .WithMany("MoviePerson")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
